server:
  port: 8083

spring:
  cache:
    type: simple  # Use 'simple' for in-memory caching, or 'redis' if using Redis
  datasource:
    url: ${POSTGRES_URL:jdbc:postgresql://localhost:5432/ecommerceorder}
    username: ${DB_USERNAME:myuser}
    password: ${DB_PASSWORD:mypassword}
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: true
    database: postgresql
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
        generate_statistics: true

  flyway:
    enabled: true
    locations: classpath:db/migration  # Path where migration scripts are located
    baseline-on-migrate: true  # Ensures Flyway starts with a baseline
    baseline-description: "init"
    username: ${DB_USERNAME:myuser}
    password: ${DB_PASSWORD:mypassword}

#  kafka:
#    bootstrap-servers: kafka:9092
#    producer:
#      key-serializer: org.apache.kafka.common.serialization.StringSerializer
#      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
#      properties:
#        spring.json.type.mapping: orderConfirmation:com.damlotec.ecommerce.kafka.OrderConfirmation
#
#order:
#  config:
#    customerUrl: http://localhost:8081/api/v1/customers
#    productUrl: http://localhost:8082/api/v1/products
#    paymentUrl: http://localhost:8080/api/v1/payments
#    test: test

#logging:
#  level:
#    org.hibernate.SQL: DEBUG


#feign:
#  client:
#    config:
#      default:
#        connectTimeout: 5000
#        readTimeout: 10000
#        retryer:
#          period: 1000  # Initial interval between retries in ms
#          maxPeriod: 5000 # Maximum interval between retries in ms
#          maxAttempts: 3  # Number of retry attempts


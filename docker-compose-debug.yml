services:
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_DB: mydatabase
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
    ports:
      - "5432:5432"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql  # Mounting init.sql to create other databases
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U myuser" ]
      interval: 10s
      retries: 4

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: adminpass
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

  mongodb:
    image: mongo:latest
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: btb
      MONGO_INITDB_ROOT_PASSWORD: btb
      MONGO_INITDB_DATABASE: customerDb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      retries: 4

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    ports:
      - "27018:8081"
    environment:
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_MONGODB_ADMINUSERNAME: btb
      ME_CONFIG_MONGODB_ADMINPASSWORD: btb
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin

    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_healthy

  discovery-server:
    build: ./services/discovery-server
    container_name: discovery-server
    ports:
      - "8761:8761"
    expose:
      - "8761"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 30s
      retries: 3
    networks:
      - app-network

  config-server:
    build: ./services/config-server
    container_name: config-server
    ports:
      - "8888:8888"
    expose:
      - "8888"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 30s
      retries: 4
    depends_on:
      discovery-server:
        condition: service_healthy
    networks:
      - app-network

  customer-service:
    build: ./services/customer-service
    container_name: customer-service
    ports:
      - "8081:8081"
      - "5005:5005"
    expose:
      - "8080"
      - "5005"
    environment:
      JAVA_TOOL_OPTIONS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005"
      DISCOVERY_SERVICE_URL: http://discovery-server:8761/eureka
      CONFIG_SERVER_URL: http://config-server:8888
      DB_HOST: mongodb
      DB_DATABASE: customerDb
      DB_USERNAME: btb
      DB_PASSWORD: btb
      DB_PORT: 27017

    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/actuator/health" ]
      interval: 30s
      retries: 5
    depends_on:
      config-server:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - app-network

  product-service:
    build: ./services/product-service
    container_name: product-service
    ports:
      - "8082:8082"
      - "5006:5006"
    expose:
      - "8082"
      - "5006"
    environment:
      JAVA_TOOL_OPTIONS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5006"
      DISCOVERY_SERVICE_URL: http://discovery-server:8761/eureka
      CONFIG_SERVER_URL: http://config-server:8888
      POSTGRES_URL: jdbc:postgresql://postgres:5432/ecommerce
      DB_USERNAME: myuser
      DB_PASSWORD: mypassword
      SPRING_FLYWAY_ENABLED: 'true'  # Activer Flyway
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8082/actuator/health" ]
      interval: 30s
      retries: 5
    depends_on:
      config-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - app-network

  order-service:
    build: ./services/order-service
    container_name: order-service
    ports:
      - "8083:8083"
      - "5007:5007"
    expose:
      - "8083"
      - "5007"
    environment:
      JAVA_TOOL_OPTIONS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5007"
      DISCOVERY_SERVICE_URL: http://discovery-server:8761/eureka
      CONFIG_SERVER_URL: http://config-server:8888
      POSTGRES_URL: jdbc:postgresql://postgres:5432/ecommerceorder
      DB_USERNAME: myuser
      DB_PASSWORD: mypassword
      SPRING_FLYWAY_ENABLED: 'true'  # Activer Flyway
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/actuator/health" ]
      interval: 30s
      retries: 6
    depends_on:
      config-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      customer-service:
        condition: service_healthy
      product-service:
        condition: service_healthy
      payment-service:
        condition: service_healthy
    networks:
      - app-network

  payment-service:
    build: ./services/payment-service
    container_name: payment-service
    ports:
      - "8084:8084"
      - "5008:5008"
    expose:
      - "8084"
      - "5008"
    environment:
      JAVA_TOOL_OPTIONS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5008"
      DISCOVERY_SERVICE_URL: http://discovery-server:8761/eureka
      CONFIG_SERVER_URL: http://config-server:8888
      POSTGRES_URL: jdbc:postgresql://postgres:5432/ecommercepayment
      DB_USERNAME: myuser
      DB_PASSWORD: mypassword
      SPRING_FLYWAY_ENABLED: 'true'  # Activer Flyway
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8084/actuator/health" ]
      interval: 30s
      retries: 5
    depends_on:
      config-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - app-network

  notification-service:
    build: ./services/notification-service
    container_name: notification-service
    ports:
      - "8085:8085"
      - "5009:5009"
    expose:
      - "8081"
      - "5005"
    environment:
      JAVA_TOOL_OPTIONS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5009"
      DISCOVERY_SERVICE_URL: http://discovery-server:8761/eureka
      CONFIG_SERVER_URL: http://config-server:8888
      DB_HOST: mongodb
      DB_DATABASE: customerDb
      DB_USERNAME: btb
      DB_PASSWORD: btb
      DB_PORT: 27017

    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8085/actuator/health" ]
      interval: 30s
      retries: 5
    depends_on:
      config-server:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - app-network

  order-poller:
    build: ./services/order-poller
    container_name: order-poller
    ports:
      - "8086:8086"
      - "5010:5010"
    expose:
      - "8086"
      - "5010"
    environment:
      JAVA_TOOL_OPTIONS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5010"
      DISCOVERY_SERVICE_URL: http://discovery-server:8761/eureka
      CONFIG_SERVER_URL: http://config-server:8888
      POSTGRES_URL: jdbc:postgresql://postgres:5432/ecommerceorder
      DB_USERNAME: myuser
      DB_PASSWORD: mypassword
      SPRING_FLYWAY_ENABLED: 'true'  # Activer Flyway
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8086/actuator/health" ]
      interval: 30s
      retries: 6
    depends_on:
      config-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      order-service:
        condition: service_healthy
    networks:
      - app-network

  payment-poller:
    build: ./services/payment-poller
    container_name: payment-poller
    ports:
      - "8087:8087"
      - "5011:5011"
    expose:
      - "8087"
      - "5011"
    environment:
      JAVA_TOOL_OPTIONS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5011"
      DISCOVERY_SERVICE_URL: http://discovery-server:8761/eureka
      CONFIG_SERVER_URL: http://config-server:8888
      POSTGRES_URL: jdbc:postgresql://postgres:5432/ecommercepayment
      DB_USERNAME: myuser
      DB_PASSWORD: mypassword
      SPRING_FLYWAY_ENABLED: 'true'  # Activer Flyway
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8087/actuator/health" ]
      interval: 30s
      retries: 6
    depends_on:
      config-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      payment-service:
        condition: service_healthy
    networks:
      - app-network

  gateway-service:
    build: ./services/gateway-service
    container_name: gateway-service
    restart: unless-stopped
    ports:
      - "9999:9999"
    expose:
      - "9999"
    environment:
      DISCOVERY_SERVICE_URL: http://discovery-server:8761/eureka
      CONFIG_SERVER_URL: http://config-server:8888
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9999/actuator/health" ]
      interval: 30s
      retries: 4
    depends_on:
      config-server:
        condition: service_healthy
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:5.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-server:5.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: "true"
      CONFLUENT_SUPPORT_CUSTOMER_ID: "anonymous"
    networks:
      - app-network

#  kafka-tools:
#    image: confluentinc/cp-kafka:5.4.0
#    hostname: kafka-tools
#    container_name: kafka-tools
#    command: [ "tail", "-f", "/dev/null" ]
#    network_mode: "host"

  schema-registry:
    image: confluentinc/cp-schema-registry:5.4.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - zookeeper
      - kafka
    ports:
      - "8088:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka:29092"
    networks:
      - app-network

  control-center:
    image: confluentinc/cp-enterprise-control-center:5.4.0
    hostname: control-center
    container_name: control-center
    depends_on:
      - zookeeper
      - kafka
      - schema-registry
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka:29092'
      CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8088"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
    networks:
      - app-network

#  kafka:
#    image: confluentinc/cp-kafka:latest
#    container_name: kafka
#    depends_on:
#      - zookeeper
#    ports:
#      - "9092:9092"  # Exposes the external port for the host machine
#      - "9093:9093"  # Exposes the external port for the host machine
#    environment:
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT  # Define security protocols for both listeners
#      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9093,EXTERNAL://0.0.0.0:9092  # Different listener names for internal and external access
#      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9093,EXTERNAL://172.17.0.1:9092  # External listener uses host IP
#      KAFKA_LISTENER_NAME_INTERNAL: PLAINTEXT  # Define the internal listener protocol
#      KAFKA_LISTENER_NAME_EXTERNAL: PLAINTEXT  # Define the external listener protocol
#      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL  # Internal communication between brokers
#    networks:
#      - app-network


  zipkin:
    image: openzipkin/zipkin:3
    container_name: zipkin
    ports:
      - "9411:9411"  # Expose Zipkin UI and collector port
    environment:
      BASE_URL: http://zipkin:9411
    networks:
      - app-network

  mail-dev:
    image: maildev/maildev:2.1.0
    container_name: mail-dev
    restart: always
    ports:
      - "1080:1080"
      - "1025:1025"
    networks:
      - app-network

volumes:
  postgres_data:
  mongodb_data:
  pgadmin_data:

networks:
  app-network:
    driver: bridge